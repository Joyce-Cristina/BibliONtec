name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  checks: write
  actions: write

jobs:
  build:
    name: CI Tests & Deploy
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: bibliontec
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v3

      - name: ⚙️ Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 📥 Instalar dependências principais
        run: |
          npm install
          npm install express-rate-limit
          npm install bcrypt
          npm install helmet express-validator winston express-winston morgan
          npm install cookie-parser
          npm install multer sharp bwip-js jsonwebtoken pdfkit mysql2 cors dotenv node-fetch

      - name: 🕒 Aguardar MySQL iniciar
        run: |
          until mysqladmin ping -h"127.0.0.1" -uroot -proot --silent; do
            echo "Aguardando MySQL iniciar..."
            sleep 2
          done

      - name: 🧱 Criar tabelas no banco de teste
        run: mysql -h 127.0.0.1 -uroot -proot bibliontec < ./bibliontec.sql

      - name: ✅ Rodar testes com Jest
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: root
          DB_NAME: bibliontec
        run: npx jest --forceExit --detectOpenHandles

      - name: 📦 Empacotar projeto
        if: success()
        run: zip -r BibliONtec.zip .

      - name: 🧹 Excluir artefatos antigos
        if: success()
        run: |
          artifacts=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/artifacts \
            | jq -r '.artifacts[] | select(.name=="bibliotec-artifact") | .id')

          for artifact in $artifacts; do
            echo "🗑️ Excluindo artefato $artifact..."
            curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact
          done

      - name: ⬆️ Upload do artefato
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: bibliotec-artifact
          path: BibliONtec.zip

      - name: 🚀 Deploy para Hostinger via FTP
        if: success()
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.HOSTINGER_FTP_SERVER }}
          username: ${{ secrets.HOSTINGER_FTP_USER }}
          password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          local-dir: ./
          server-dir: /public_html/ # ou o caminho da pasta onde está seu site
          exclude: |
            .git*
            node_modules/*
            .github/*
